buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'eclipse'


sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'BRBController',
                   'Implementation-Version': version,
                   'Main-Class': 'com.esamarathon.bigredbutton.BigRedButton'
    }
	
	doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}

//Make this project as a Gradle project
eclipse.project {
  	natures 'org.eclipse.buildship.core.gradleprojectnature'
}

eclipse.jdt {
	//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
    javaRuntimeName = "J2SE-1.8"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
	
	compile 'org.mod4j.org.apache.commons:cli:1.0.0'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'

	
	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'

	
    
	compile 'com.pi4j:pi4j-core:1.1'
	compile 'com.pi4j:pi4j-gpio-extension:1.1'
	compile 'com.pi4j:pi4j-device:1.1'
	compile 'com.pi4j:pi4j-example:1.1'
	compile 'com.pi4j:pi4j-service:1.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    testCompile 'org.mockito:mockito-core:2.5.5'
}
